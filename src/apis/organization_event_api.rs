/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_organization_event_targets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationEventTargetsError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationEventsError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Get available event targets to filter events
pub async fn get_organization_event_targets(
    configuration: &configuration::Configuration,
    organization_id: &str,
    from_timestamp: Option<&str>,
    to_timestamp: Option<&str>,
    event_type: Option<models::OrganizationEventType>,
    target_type: Option<models::OrganizationEventTargetType>,
    triggered_by: Option<&str>,
    origin: Option<models::OrganizationEventOrigin>,
    project_id: Option<&str>,
    environment_id: Option<&str>,
) -> Result<models::OrganizationEventTargetResponseList, Error<GetOrganizationEventTargetsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_from_timestamp = from_timestamp;
    let p_to_timestamp = to_timestamp;
    let p_event_type = event_type;
    let p_target_type = target_type;
    let p_triggered_by = triggered_by;
    let p_origin = origin;
    let p_project_id = project_id;
    let p_environment_id = environment_id;

    let uri_str = format!(
        "{}/organization/{organizationId}/targets",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_from_timestamp {
        req_builder = req_builder.query(&[("fromTimestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_to_timestamp {
        req_builder = req_builder.query(&[("toTimestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_event_type {
        req_builder = req_builder.query(&[("eventType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_target_type {
        req_builder = req_builder.query(&[("targetType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_triggered_by {
        req_builder = req_builder.query(&[("triggeredBy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_origin {
        req_builder = req_builder.query(&[("origin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_project_id {
        req_builder = req_builder.query(&[("projectId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_environment_id {
        req_builder = req_builder.query(&[("environmentId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationEventTargetResponseList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationEventTargetResponseList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationEventTargetsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get all events inside the organization
pub async fn get_organization_events(
    configuration: &configuration::Configuration,
    organization_id: &str,
    page_size: Option<f64>,
    from_timestamp: Option<&str>,
    to_timestamp: Option<&str>,
    continue_token: Option<&str>,
    step_back_token: Option<&str>,
    event_type: Option<models::OrganizationEventType>,
    target_type: Option<models::OrganizationEventTargetType>,
    target_id: Option<&str>,
    sub_target_type: Option<models::OrganizationEventSubTargetType>,
    triggered_by: Option<&str>,
    origin: Option<models::OrganizationEventOrigin>,
) -> Result<models::OrganizationEventResponseList, Error<GetOrganizationEventsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_page_size = page_size;
    let p_from_timestamp = from_timestamp;
    let p_to_timestamp = to_timestamp;
    let p_continue_token = continue_token;
    let p_step_back_token = step_back_token;
    let p_event_type = event_type;
    let p_target_type = target_type;
    let p_target_id = target_id;
    let p_sub_target_type = sub_target_type;
    let p_triggered_by = triggered_by;
    let p_origin = origin;

    let uri_str = format!(
        "{}/organization/{organizationId}/events",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_from_timestamp {
        req_builder = req_builder.query(&[("fromTimestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_to_timestamp {
        req_builder = req_builder.query(&[("toTimestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_continue_token {
        req_builder = req_builder.query(&[("continueToken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_step_back_token {
        req_builder = req_builder.query(&[("stepBackToken", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_event_type {
        req_builder = req_builder.query(&[("eventType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_target_type {
        req_builder = req_builder.query(&[("targetType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_target_id {
        req_builder = req_builder.query(&[("targetId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sub_target_type {
        req_builder = req_builder.query(&[("subTargetType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_triggered_by {
        req_builder = req_builder.query(&[("triggeredBy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_origin {
        req_builder = req_builder.query(&[("origin", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationEventResponseList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationEventResponseList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationEventsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
