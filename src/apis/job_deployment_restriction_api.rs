/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`create_job_deployment_restriction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateJobDeploymentRestrictionError {
    Status400(),
    Status401(),
    Status403(),
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_job_deployment_restriction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteJobDeploymentRestrictionError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_job_deployment_restriction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditJobDeploymentRestrictionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_job_deployment_restrictions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetJobDeploymentRestrictionsError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Create a job deployment restriction
pub async fn create_job_deployment_restriction(
    configuration: &configuration::Configuration,
    job_id: &str,
    job_deployment_restriction_request: Option<models::JobDeploymentRestrictionRequest>,
) -> Result<models::JobDeploymentRestrictionResponse, Error<CreateJobDeploymentRestrictionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;
    let p_job_deployment_restriction_request = job_deployment_restriction_request;

    let uri_str = format!(
        "{}/job/{jobId}/deploymentRestriction",
        configuration.base_path,
        jobId = crate::apis::urlencode(p_job_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_job_deployment_restriction_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::JobDeploymentRestrictionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::JobDeploymentRestrictionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateJobDeploymentRestrictionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a job deployment restriction
pub async fn delete_job_deployment_restriction(
    configuration: &configuration::Configuration,
    job_id: &str,
    deployment_restriction_id: &str,
) -> Result<(), Error<DeleteJobDeploymentRestrictionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;
    let p_deployment_restriction_id = deployment_restriction_id;

    let uri_str = format!(
        "{}/job/{jobId}/deploymentRestriction/{deploymentRestrictionId}",
        configuration.base_path,
        jobId = crate::apis::urlencode(p_job_id),
        deploymentRestrictionId = crate::apis::urlencode(p_deployment_restriction_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteJobDeploymentRestrictionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Edit a job deployment restriction
pub async fn edit_job_deployment_restriction(
    configuration: &configuration::Configuration,
    job_id: &str,
    deployment_restriction_id: &str,
    job_deployment_restriction_request: Option<models::JobDeploymentRestrictionRequest>,
) -> Result<models::JobDeploymentRestrictionResponse, Error<EditJobDeploymentRestrictionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;
    let p_deployment_restriction_id = deployment_restriction_id;
    let p_job_deployment_restriction_request = job_deployment_restriction_request;

    let uri_str = format!(
        "{}/job/{jobId}/deploymentRestriction/{deploymentRestrictionId}",
        configuration.base_path,
        jobId = crate::apis::urlencode(p_job_id),
        deploymentRestrictionId = crate::apis::urlencode(p_deployment_restriction_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_job_deployment_restriction_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::JobDeploymentRestrictionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::JobDeploymentRestrictionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EditJobDeploymentRestrictionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get job deployment restrictions
pub async fn get_job_deployment_restrictions(
    configuration: &configuration::Configuration,
    job_id: &str,
) -> Result<models::JobDeploymentRestrictionResponseList, Error<GetJobDeploymentRestrictionsError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_job_id = job_id;

    let uri_str = format!(
        "{}/job/{jobId}/deploymentRestriction",
        configuration.base_path,
        jobId = crate::apis::urlencode(p_job_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::JobDeploymentRestrictionResponseList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::JobDeploymentRestrictionResponseList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetJobDeploymentRestrictionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
