/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationCustomRoleClusterPermission : Indicates the permission for a target cluster, from the lowest to the highest: - `VIEWER` user has only read access on target cluster - `ENV_CREATOR` user can deploy on the cluster - `ADMIN` user can modify the cluster settings 
/// Indicates the permission for a target cluster, from the lowest to the highest: - `VIEWER` user has only read access on target cluster - `ENV_CREATOR` user can deploy on the cluster - `ADMIN` user can modify the cluster settings 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationCustomRoleClusterPermission {
    #[serde(rename = "VIEWER")]
    Viewer,
    #[serde(rename = "ENV_CREATOR")]
    EnvCreator,
    #[serde(rename = "ADMIN")]
    Admin,

}

impl std::fmt::Display for OrganizationCustomRoleClusterPermission {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Viewer => write!(f, "VIEWER"),
            Self::EnvCreator => write!(f, "ENV_CREATOR"),
            Self::Admin => write!(f, "ADMIN"),
        }
    }
}

impl Default for OrganizationCustomRoleClusterPermission {
    fn default() -> OrganizationCustomRoleClusterPermission {
        Self::Viewer
    }
}

