/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Database {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// name is case insensitive
    #[serde(rename = "name")]
    pub name: String,
    /// give a description to this database
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "type")]
    pub r#type: models::DatabaseTypeEnum,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "mode")]
    pub mode: models::DatabaseModeEnum,
    #[serde(rename = "accessibility", skip_serializing_if = "Option::is_none")]
    pub accessibility: Option<models::DatabaseAccessibilityEnum>,
    /// unit is millicores (m). 1000m = 1 cpu This field will be ignored for managed DB (instance type will be used instead). 
    #[serde(rename = "cpu", skip_serializing_if = "Option::is_none")]
    pub cpu: Option<i32>,
    /// Database instance type to be used for this database. The list of values can be retrieved via the endpoint /{CloudProvider}/managedDatabase/instanceType/{region}/{dbType}. This field is null for container DB.
    #[serde(rename = "instance_type", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    /// unit is MB. 1024 MB = 1GB This field will be ignored for managed DB (instance type will be used instead). Default value is linked to the database type: - MANAGED: `100` - CONTAINER   - POSTGRES: `100`   - REDIS: `100`   - MYSQL: `512`   - MONGODB: `256` 
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// unit is GB
    #[serde(rename = "storage", skip_serializing_if = "Option::is_none")]
    pub storage: Option<i32>,
    #[serde(rename = "annotations_groups", skip_serializing_if = "Option::is_none")]
    pub annotations_groups: Option<Vec<models::OrganizationAnnotationsGroupResponse>>,
    #[serde(rename = "labels_groups", skip_serializing_if = "Option::is_none")]
    pub labels_groups: Option<Vec<models::OrganizationLabelsGroupResponse>>,
    /// Icon URI representing the database.
    #[serde(rename = "icon_uri")]
    pub icon_uri: String,
    #[serde(rename = "environment")]
    pub environment: Box<models::ReferenceObject>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Maximum cpu that can be allocated to the database based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu
    #[serde(rename = "maximum_cpu", skip_serializing_if = "Option::is_none")]
    pub maximum_cpu: Option<i32>,
    /// Maximum memory that can be allocated to the database based on organization cluster configuration. unit is MB. 1024 MB = 1GB
    #[serde(rename = "maximum_memory", skip_serializing_if = "Option::is_none")]
    pub maximum_memory: Option<i32>,
    /// indicates if the database disk is encrypted or not
    #[serde(rename = "disk_encrypted", skip_serializing_if = "Option::is_none")]
    pub disk_encrypted: Option<bool>,
    #[serde(rename = "service_type")]
    pub service_type: models::ServiceTypeEnum,
}

impl Database {
    pub fn new(id: uuid::Uuid, created_at: String, name: String, r#type: models::DatabaseTypeEnum, version: String, mode: models::DatabaseModeEnum, icon_uri: String, environment: models::ReferenceObject, service_type: models::ServiceTypeEnum) -> Database {
        Database {
            id,
            created_at,
            updated_at: None,
            name,
            description: None,
            r#type,
            version,
            mode,
            accessibility: None,
            cpu: None,
            instance_type: None,
            memory: None,
            storage: None,
            annotations_groups: None,
            labels_groups: None,
            icon_uri,
            environment: Box::new(environment),
            host: None,
            port: None,
            maximum_cpu: None,
            maximum_memory: None,
            disk_encrypted: None,
            service_type,
        }
    }
}

