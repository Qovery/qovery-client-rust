/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlertRuleState {
    #[serde(rename = "UNDEPLOYED")]
    Undeployed,
    #[serde(rename = "OK")]
    Ok,
    #[serde(rename = "TRIGGERED")]
    Triggered,
    #[serde(rename = "PENDING_NOTIFICATION")]
    PendingNotification,
    #[serde(rename = "NOTIFIED")]
    Notified,
    #[serde(rename = "SUPPRESSED")]
    Suppressed,
    #[serde(rename = "UNROUTED")]
    Unrouted,
}

impl std::fmt::Display for AlertRuleState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Undeployed => write!(f, "UNDEPLOYED"),
            Self::Ok => write!(f, "OK"),
            Self::Triggered => write!(f, "TRIGGERED"),
            Self::PendingNotification => write!(f, "PENDING_NOTIFICATION"),
            Self::Notified => write!(f, "NOTIFIED"),
            Self::Suppressed => write!(f, "SUPPRESSED"),
            Self::Unrouted => write!(f, "UNROUTED"),
        }
    }
}

impl Default for AlertRuleState {
    fn default() -> AlertRuleState {
        Self::Undeployed
    }
}
