/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KarpenterGpuNodePoolOverride {
    #[serde(rename = "consolidation", skip_serializing_if = "Option::is_none")]
    pub consolidation: Option<models::KarpenterNodePoolConsolidation>,
    #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
    pub limits: Option<models::KarpenterNodePoolLimits>,
    #[serde(rename = "requirements", skip_serializing_if = "Option::is_none")]
    pub requirements: Option<Vec<models::KarpenterNodePoolRequirement>>,
    #[serde(rename = "disk_size_in_gib", skip_serializing_if = "Option::is_none")]
    pub disk_size_in_gib: Option<i32>,
    #[serde(rename = "spot_enabled", skip_serializing_if = "Option::is_none")]
    pub spot_enabled: Option<bool>,
}

impl KarpenterGpuNodePoolOverride {
    pub fn new() -> KarpenterGpuNodePoolOverride {
        KarpenterGpuNodePoolOverride {
            consolidation: None,
            limits: None,
            requirements: None,
            disk_size_in_gib: None,
            spot_enabled: None,
        }
    }
}
