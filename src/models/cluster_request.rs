/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterRequest {
    /// name is case-insensitive
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "cloud_provider")]
    pub cloud_provider: models::CloudVendorEnum,
    #[serde(
        rename = "cloud_provider_credentials",
        skip_serializing_if = "Option::is_none"
    )]
    pub cloud_provider_credentials: Option<models::ClusterCloudProviderInfoRequest>,
    #[serde(rename = "min_running_nodes", skip_serializing_if = "Option::is_none")]
    pub min_running_nodes: Option<i32>,
    #[serde(rename = "max_running_nodes", skip_serializing_if = "Option::is_none")]
    pub max_running_nodes: Option<i32>,
    /// Unit is in GB. The disk size to be used for the node configuration
    #[serde(rename = "disk_size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i32>,
    /// the instance type to be used for this cluster. The list of values can be retrieved via the endpoint /{CloudProvider}/instanceType
    #[serde(rename = "instance_type", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "kubernetes", skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<models::KubernetesEnum>,
    /// specific flag to indicate that this cluster is a production one
    #[serde(rename = "production", skip_serializing_if = "Option::is_none")]
    pub production: Option<bool>,
    /// Indicate your public ssh_key to remotely connect to your EC2 instance.
    #[serde(rename = "ssh_keys", skip_serializing_if = "Option::is_none")]
    pub ssh_keys: Option<Vec<String>>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<models::ClusterRequestFeaturesInner>>,
    #[serde(rename = "metrics_parameters", skip_serializing_if = "Option::is_none")]
    pub metrics_parameters: Option<models::MetricsParameters>,
    #[serde(
        rename = "infrastructure_charts_parameters",
        skip_serializing_if = "Option::is_none"
    )]
    pub infrastructure_charts_parameters: Option<models::ClusterInfrastructureNginxChartParameters>,
}

impl ClusterRequest {
    pub fn new(
        name: String,
        region: String,
        cloud_provider: models::CloudVendorEnum,
    ) -> ClusterRequest {
        ClusterRequest {
            name,
            description: None,
            region,
            cloud_provider,
            cloud_provider_credentials: None,
            min_running_nodes: None,
            max_running_nodes: None,
            disk_size: None,
            instance_type: None,
            kubernetes: None,
            production: None,
            ssh_keys: None,
            features: None,
            metrics_parameters: None,
            infrastructure_charts_parameters: None,
        }
    }
}
