/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusKindEnum {
    #[serde(rename = "CANCELED")]
    Canceled,
    #[serde(rename = "CANCELING")]
    Canceling,
    #[serde(rename = "DELETED")]
    Deleted,
    #[serde(rename = "DELETE_ERROR")]
    DeleteError,
    #[serde(rename = "DELETE_IN_PROGRESS")]
    DeleteInProgress,
    #[serde(rename = "DEPLOYED")]
    Deployed,
    #[serde(rename = "DEPLOYMENT_ERROR")]
    DeploymentError,
    #[serde(rename = "DEPLOYMENT_IN_PROGRESS")]
    DeploymentInProgress,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "PAUSED")]
    Paused,
    #[serde(rename = "PAUSE_ERROR")]
    PauseError,
    #[serde(rename = "PAUSE_IN_PROGRESS")]
    PauseInProgress,
    #[serde(rename = "WAITING")]
    Waiting,
}

impl std::fmt::Display for StatusKindEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Canceled => write!(f, "CANCELED"),
            Self::Canceling => write!(f, "CANCELING"),
            Self::Deleted => write!(f, "DELETED"),
            Self::DeleteError => write!(f, "DELETE_ERROR"),
            Self::DeleteInProgress => write!(f, "DELETE_IN_PROGRESS"),
            Self::Deployed => write!(f, "DEPLOYED"),
            Self::DeploymentError => write!(f, "DEPLOYMENT_ERROR"),
            Self::DeploymentInProgress => write!(f, "DEPLOYMENT_IN_PROGRESS"),
            Self::Error => write!(f, "ERROR"),
            Self::Paused => write!(f, "PAUSED"),
            Self::PauseError => write!(f, "PAUSE_ERROR"),
            Self::PauseInProgress => write!(f, "PAUSE_IN_PROGRESS"),
            Self::Waiting => write!(f, "WAITING"),
        }
    }
}

impl Default for StatusKindEnum {
    fn default() -> StatusKindEnum {
        Self::Canceled
    }
}
