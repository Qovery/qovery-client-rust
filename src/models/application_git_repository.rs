/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationGitRepository {
    #[serde(rename = "has_access", skip_serializing_if = "Option::is_none")]
    pub has_access: Option<bool>,
    #[serde(rename = "provider")]
    pub provider: models::GitProviderEnum,
    #[serde(rename = "owner")]
    pub owner: String,
    #[serde(rename = "url")]
    pub url: String,
    /// repository name
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "root_path", skip_serializing_if = "Option::is_none")]
    pub root_path: Option<String>,
    /// Git commit ID corresponding to the deployed version of the app
    #[serde(rename = "deployed_commit_id", skip_serializing_if = "Option::is_none")]
    pub deployed_commit_id: Option<String>,
    /// Git commit date corresponding to the deployed version of the app
    #[serde(
        rename = "deployed_commit_date",
        skip_serializing_if = "Option::is_none"
    )]
    pub deployed_commit_date: Option<String>,
    /// Git commit user corresponding to the deployed version of the app
    #[serde(
        rename = "deployed_commit_contributor",
        skip_serializing_if = "Option::is_none"
    )]
    pub deployed_commit_contributor: Option<String>,
    #[serde(
        rename = "deployed_commit_tag",
        skip_serializing_if = "Option::is_none"
    )]
    pub deployed_commit_tag: Option<String>,
    #[serde(
        rename = "git_token_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub git_token_id: Option<Option<String>>,
    #[serde(
        rename = "git_token_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub git_token_name: Option<Option<String>>,
}

impl ApplicationGitRepository {
    pub fn new(
        provider: models::GitProviderEnum,
        owner: String,
        url: String,
        name: String,
    ) -> ApplicationGitRepository {
        ApplicationGitRepository {
            has_access: None,
            provider,
            owner,
            url,
            name,
            branch: None,
            root_path: None,
            deployed_commit_id: None,
            deployed_commit_date: None,
            deployed_commit_contributor: None,
            deployed_commit_tag: None,
            git_token_id: None,
            git_token_name: None,
        }
    }
}
