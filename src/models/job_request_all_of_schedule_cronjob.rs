/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobRequestAllOfScheduleCronjob {
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,
    /// optional entrypoint when launching container
    #[serde(rename = "entrypoint", skip_serializing_if = "Option::is_none")]
    pub entrypoint: Option<String>,
    /// Specify a timezone identifier to run the schedule at. By default Etc/UTC
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// Can only be set if the event is CRON.   Represent the cron format for the job schedule without seconds.   For example: `* * * * *` represent the cron to launch the job every minute.   See https://crontab.guru/ to WISIWIG interface.   Timezone is UTC
    #[serde(rename = "scheduled_at")]
    pub scheduled_at: String,
}

impl JobRequestAllOfScheduleCronjob {
    pub fn new(scheduled_at: String) -> JobRequestAllOfScheduleCronjob {
        JobRequestAllOfScheduleCronjob {
            arguments: None,
            entrypoint: None,
            timezone: None,
            scheduled_at,
        }
    }
}
