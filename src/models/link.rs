/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    /// ID of the associated service
    #[serde(rename = "service_id")]
    pub service_id: uuid::Uuid,
    #[serde(rename = "service_type")]
    pub service_type: models::ServiceTypeEnum,
    /// URL to access the service
    #[serde(rename = "url")]
    pub url: String,
    /// The port from which the service is reachable from within the cluster
    #[serde(rename = "internal_port")]
    pub internal_port: i32,
    /// The port from which the service is reachable from externally (i.e: 443 for HTTPS)
    #[serde(rename = "external_port")]
    pub external_port: i32,
    /// True if the domain is managed by Qovery, false if it belongs to the user
    #[serde(rename = "is_qovery_domain")]
    pub is_qovery_domain: bool,
    /// Indicate if the link is using the root of the domain and not one derivated from port i.e: p8080.zxxxx.jvm.worl      => is_default = false, is_qovery = true zxxxx.jvm.world           => is_default = true, is_qovery = true p8080-my-super-domain.com => is_default = false, is_qovery = false my-super-domain.com       => is_default = true, is_qovery = false
    #[serde(rename = "is_default")]
    pub is_default: bool,
}

impl Link {
    pub fn new(
        service_id: uuid::Uuid,
        service_type: models::ServiceTypeEnum,
        url: String,
        internal_port: i32,
        external_port: i32,
        is_qovery_domain: bool,
        is_default: bool,
    ) -> Link {
        Link {
            service_id,
            service_type,
            url,
            internal_port,
            external_port,
            is_qovery_domain,
            is_default,
        }
    }
}
