/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentLogsError {
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(rename = "user_log_message", skip_serializing_if = "Option::is_none")]
    pub user_log_message: Option<String>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "hint_message", skip_serializing_if = "Option::is_none")]
    pub hint_message: Option<String>,
    #[serde(rename = "underlying_error", skip_serializing_if = "Option::is_none")]
    pub underlying_error: Option<models::EnvironmentLogsErrorUnderlyingError>,
}

impl EnvironmentLogsError {
    pub fn new() -> EnvironmentLogsError {
        EnvironmentLogsError {
            tag: None,
            user_log_message: None,
            link: None,
            hint_message: None,
            underlying_error: None,
        }
    }
}
