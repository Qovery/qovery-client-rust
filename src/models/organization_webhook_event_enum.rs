/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationWebhookEventEnum : Events to subscribe to and send to the `target_url`. - `DEPLOYMENT_STARTED` send an event when a deployment is started and going to be executed - `DEPLOYMENT_CANCELLED` send an event when a deployment is cancelled - `DEPLOYMENT_FAILURE` send an event when a deployment failed - `DEPLOYMENT_SUCCESSFUL` send an event when a deployment is successful
/// Events to subscribe to and send to the `target_url`. - `DEPLOYMENT_STARTED` send an event when a deployment is started and going to be executed - `DEPLOYMENT_CANCELLED` send an event when a deployment is cancelled - `DEPLOYMENT_FAILURE` send an event when a deployment failed - `DEPLOYMENT_SUCCESSFUL` send an event when a deployment is successful
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationWebhookEventEnum {
    #[serde(rename = "DEPLOYMENT_STARTED")]
    DeploymentStarted,
    #[serde(rename = "DEPLOYMENT_CANCELLED")]
    DeploymentCancelled,
    #[serde(rename = "DEPLOYMENT_FAILURE")]
    DeploymentFailure,
    #[serde(rename = "DEPLOYMENT_SUCCESSFUL")]
    DeploymentSuccessful,
}

impl std::fmt::Display for OrganizationWebhookEventEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::DeploymentStarted => write!(f, "DEPLOYMENT_STARTED"),
            Self::DeploymentCancelled => write!(f, "DEPLOYMENT_CANCELLED"),
            Self::DeploymentFailure => write!(f, "DEPLOYMENT_FAILURE"),
            Self::DeploymentSuccessful => write!(f, "DEPLOYMENT_SUCCESSFUL"),
        }
    }
}

impl Default for OrganizationWebhookEventEnum {
    fn default() -> OrganizationWebhookEventEnum {
        Self::DeploymentStarted
    }
}
