/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServicePortRequestPortsInner {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The listening port of your service.
    #[serde(rename = "internal_port")]
    pub internal_port: i32,
    /// The exposed port for your service. This is optional. If not set a default port will be used.
    #[serde(rename = "external_port", skip_serializing_if = "Option::is_none")]
    pub external_port: Option<i32>,
    /// Expose the port to the world
    #[serde(rename = "publicly_accessible")]
    pub publicly_accessible: bool,
    /// is the default port to use for domain
    #[serde(rename = "is_default", skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<models::PortProtocolEnum>,
    /// Indicate the path or regex that must match for traffic to be accepted on your service i.e: /api/ will only accept http calls that start with /api/  Only valid for publicly_accessible HTTP or GRPC ports.
    #[serde(rename = "public_path", skip_serializing_if = "Option::is_none")]
    pub public_path: Option<String>,
    /// Indicate the new path that will be used to reach your service after replacement i.e: public_path -> /(.*)  public_path_rewrite -> /api/$1 will append /api/ on all externaly requested url when reaching the service  external/use url -> example.com/foobar  -> url seen by the service -> example.com/api/foobar Only valid for publicly_accessible HTTP or GRPC ports.
    #[serde(
        rename = "public_path_rewrite",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_path_rewrite: Option<String>,
}

impl ServicePortRequestPortsInner {
    pub fn new(internal_port: i32, publicly_accessible: bool) -> ServicePortRequestPortsInner {
        ServicePortRequestPortsInner {
            id: None,
            name: None,
            internal_port,
            external_port: None,
            publicly_accessible,
            is_default: None,
            protocol: None,
            public_path: None,
            public_path_rewrite: None,
        }
    }
}
