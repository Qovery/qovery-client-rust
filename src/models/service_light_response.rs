/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceLightResponse {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "icon_uri")]
    pub icon_uri: String,
    #[serde(rename = "service_type")]
    pub service_type: models::ServiceTypeEnum,
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    #[serde(rename = "project_name")]
    pub project_name: String,
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    #[serde(rename = "environment_name")]
    pub environment_name: String,
    #[serde(rename = "job_type", skip_serializing_if = "Option::is_none")]
    pub job_type: Option<JobType>,
}

impl ServiceLightResponse {
    pub fn new(
        id: uuid::Uuid,
        name: String,
        description: String,
        icon_uri: String,
        service_type: models::ServiceTypeEnum,
        project_id: uuid::Uuid,
        project_name: String,
        environment_id: uuid::Uuid,
        environment_name: String,
    ) -> ServiceLightResponse {
        ServiceLightResponse {
            id,
            name,
            description,
            icon_uri,
            service_type,
            project_id,
            project_name,
            environment_id,
            environment_name,
            job_type: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobType {
    #[serde(rename = "CRON")]
    Cron,
    #[serde(rename = "LIFECYCLE")]
    Lifecycle,
}

impl Default for JobType {
    fn default() -> JobType {
        Self::Cron
    }
}
