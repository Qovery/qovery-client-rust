/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TfVarsDiscoveryModeSpecificPaths : Discover tfvars files at specific paths only
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfVarsDiscoveryModeSpecificPaths {
    /// Discriminator for specific paths mode
    #[serde(rename = "type")]
    pub r#type: Type,
    /// List of specific paths to tfvars files
    #[serde(rename = "paths")]
    pub paths: Vec<String>,
}

impl TfVarsDiscoveryModeSpecificPaths {
    /// Discover tfvars files at specific paths only
    pub fn new(r#type: Type, paths: Vec<String>) -> TfVarsDiscoveryModeSpecificPaths {
        TfVarsDiscoveryModeSpecificPaths { r#type, paths }
    }
}
/// Discriminator for specific paths mode
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SpecificPaths")]
    SpecificPaths,
}

impl Default for Type {
    fn default() -> Type {
        Self::SpecificPaths
    }
}
