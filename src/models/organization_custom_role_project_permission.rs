/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationCustomRoleProjectPermission : Indicates the permission for a target project and a given environment type, from the lowest to the highest: - `NO_ACCESS` user has no access - `VIEWER` user can access the environment (and applications / containers / databases / variables) - `DEPLOYER` user can deploy the environment (dependent on the required cluster permission `ENV_CREATOR`) - `MANAGER` user can create an environment (and applications / containers / databases / variables)
/// Indicates the permission for a target project and a given environment type, from the lowest to the highest: - `NO_ACCESS` user has no access - `VIEWER` user can access the environment (and applications / containers / databases / variables) - `DEPLOYER` user can deploy the environment (dependent on the required cluster permission `ENV_CREATOR`) - `MANAGER` user can create an environment (and applications / containers / databases / variables)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationCustomRoleProjectPermission {
    #[serde(rename = "NO_ACCESS")]
    NoAccess,
    #[serde(rename = "VIEWER")]
    Viewer,
    #[serde(rename = "DEPLOYER")]
    Deployer,
    #[serde(rename = "MANAGER")]
    Manager,
}

impl std::fmt::Display for OrganizationCustomRoleProjectPermission {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::NoAccess => write!(f, "NO_ACCESS"),
            Self::Viewer => write!(f, "VIEWER"),
            Self::Deployer => write!(f, "DEPLOYER"),
            Self::Manager => write!(f, "MANAGER"),
        }
    }
}

impl Default for OrganizationCustomRoleProjectPermission {
    fn default() -> OrganizationCustomRoleProjectPermission {
        Self::NoAccess
    }
}
