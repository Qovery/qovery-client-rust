/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ServiceStepMetricNameEnum : The name of the deployment step at the service level: - REGISTRY_CREATE_REPOSITORY: The step to create the repository in the registry. - GIT_CLONE: The step to clone the source code repository.  - BUILD_QUEUEING: The queuing time preceding the actual building step. - BUILD: The step to build the source code. - DEPLOYMENT_QUEUEING: The queuing time preceding the actual deployment step. - DEPLOYMENT: The step to deploy the service.  - ROUTER_DEPLOYMENT: The step to deploy the router.  - MIRROR_IMAGE: The step to mirror the image to the private registry.
/// The name of the deployment step at the service level: - REGISTRY_CREATE_REPOSITORY: The step to create the repository in the registry. - GIT_CLONE: The step to clone the source code repository.  - BUILD_QUEUEING: The queuing time preceding the actual building step. - BUILD: The step to build the source code. - DEPLOYMENT_QUEUEING: The queuing time preceding the actual deployment step. - DEPLOYMENT: The step to deploy the service.  - ROUTER_DEPLOYMENT: The step to deploy the router.  - MIRROR_IMAGE: The step to mirror the image to the private registry.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceStepMetricNameEnum {
    #[serde(rename = "REGISTRY_CREATE_REPOSITORY")]
    RegistryCreateRepository,
    #[serde(rename = "GIT_CLONE")]
    GitClone,
    #[serde(rename = "BUILD_QUEUEING")]
    BuildQueueing,
    #[serde(rename = "BUILD")]
    Build,
    #[serde(rename = "DEPLOYMENT_QUEUEING")]
    DeploymentQueueing,
    #[serde(rename = "DEPLOYMENT")]
    Deployment,
    #[serde(rename = "ROUTER_DEPLOYMENT")]
    RouterDeployment,
    #[serde(rename = "MIRROR_IMAGE")]
    MirrorImage,
}

impl std::fmt::Display for ServiceStepMetricNameEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::RegistryCreateRepository => write!(f, "REGISTRY_CREATE_REPOSITORY"),
            Self::GitClone => write!(f, "GIT_CLONE"),
            Self::BuildQueueing => write!(f, "BUILD_QUEUEING"),
            Self::Build => write!(f, "BUILD"),
            Self::DeploymentQueueing => write!(f, "DEPLOYMENT_QUEUEING"),
            Self::Deployment => write!(f, "DEPLOYMENT"),
            Self::RouterDeployment => write!(f, "ROUTER_DEPLOYMENT"),
            Self::MirrorImage => write!(f, "MIRROR_IMAGE"),
        }
    }
}

impl Default for ServiceStepMetricNameEnum {
    fn default() -> ServiceStepMetricNameEnum {
        Self::RegistryCreateRepository
    }
}
