/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Probe {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::ProbeType>,
    #[serde(
        rename = "initial_delay_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub initial_delay_seconds: Option<i32>,
    #[serde(rename = "period_seconds", skip_serializing_if = "Option::is_none")]
    pub period_seconds: Option<i32>,
    #[serde(rename = "timeout_seconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<i32>,
    #[serde(rename = "success_threshold", skip_serializing_if = "Option::is_none")]
    pub success_threshold: Option<i32>,
    #[serde(rename = "failure_threshold", skip_serializing_if = "Option::is_none")]
    pub failure_threshold: Option<i32>,
}

impl Probe {
    pub fn new() -> Probe {
        Probe {
            r#type: None,
            initial_delay_seconds: None,
            period_seconds: None,
            timeout_seconds: None,
            success_threshold: None,
            failure_threshold: None,
        }
    }
}
