/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationEventTargetType : Type of the organization event
/// Type of the organization event
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationEventTargetType {
    #[serde(rename = "APPLICATION")]
    Application,
    #[serde(rename = "CLUSTER")]
    Cluster,
    #[serde(rename = "CONTAINER")]
    Container,
    #[serde(rename = "CONTAINER_REGISTRY")]
    ContainerRegistry,
    #[serde(rename = "DATABASE")]
    Database,
    #[serde(rename = "ENVIRONMENT")]
    Environment,
    #[serde(rename = "JOB")]
    Job,
    #[serde(rename = "HELM")]
    Helm,
    #[serde(rename = "MEMBERS_AND_ROLES")]
    MembersAndRoles,
    #[serde(rename = "ORGANIZATION")]
    Organization,
    #[serde(rename = "PROJECT")]
    Project,
    #[serde(rename = "WEBHOOK")]
    Webhook,
    #[serde(rename = "TERRAFORM")]
    Terraform,
}

impl std::fmt::Display for OrganizationEventTargetType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Application => write!(f, "APPLICATION"),
            Self::Cluster => write!(f, "CLUSTER"),
            Self::Container => write!(f, "CONTAINER"),
            Self::ContainerRegistry => write!(f, "CONTAINER_REGISTRY"),
            Self::Database => write!(f, "DATABASE"),
            Self::Environment => write!(f, "ENVIRONMENT"),
            Self::Job => write!(f, "JOB"),
            Self::Helm => write!(f, "HELM"),
            Self::MembersAndRoles => write!(f, "MEMBERS_AND_ROLES"),
            Self::Organization => write!(f, "ORGANIZATION"),
            Self::Project => write!(f, "PROJECT"),
            Self::Webhook => write!(f, "WEBHOOK"),
            Self::Terraform => write!(f, "TERRAFORM"),
        }
    }
}

impl Default for OrganizationEventTargetType {
    fn default() -> OrganizationEventTargetType {
        Self::Application
    }
}
