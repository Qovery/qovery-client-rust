/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HelmRequest {
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<models::HelmPortRequestPortsInner>>,
    /// name is case insensitive
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Maximum number of seconds allowed for helm to run before killing it and mark it as failed
    #[serde(rename = "timeout_sec", skip_serializing_if = "Option::is_none")]
    pub timeout_sec: Option<i32>,
    /// Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called or when a new commit is updated. If not specified, it takes the value of the `auto_preview` property from the associated environment.
    #[serde(rename = "auto_preview", skip_serializing_if = "Option::is_none")]
    pub auto_preview: Option<bool>,
    /// Specify if the helm will be automatically updated after receiving a new image tag or a new commit according to the source type.
    #[serde(rename = "auto_deploy")]
    pub auto_deploy: bool,
    #[serde(rename = "source")]
    pub source: models::HelmRequestAllOfSource,
    /// The extra arguments to pass to helm
    #[serde(rename = "arguments")]
    pub arguments: Vec<String>,
    /// If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights
    #[serde(
        rename = "allow_cluster_wide_resources",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_cluster_wide_resources: Option<bool>,
    #[serde(rename = "values_override")]
    pub values_override: models::HelmRequestAllOfValuesOverride,
    /// Icon URI representing the helm service.
    #[serde(rename = "icon_uri", skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
}

impl HelmRequest {
    pub fn new(
        name: String,
        auto_deploy: bool,
        source: models::HelmRequestAllOfSource,
        arguments: Vec<String>,
        values_override: models::HelmRequestAllOfValuesOverride,
    ) -> HelmRequest {
        HelmRequest {
            ports: None,
            name,
            description: None,
            timeout_sec: None,
            auto_preview: None,
            auto_deploy,
            source,
            arguments,
            allow_cluster_wide_resources: None,
            values_override,
            icon_uri: None,
        }
    }
}
