/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentVariable {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// key is case sensitive.
    #[serde(rename = "key")]
    pub key: String,
    /// value of the env variable.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// should be set for file only. variable mount path makes variable a file (where file should be mounted).
    #[serde(rename = "mount_path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mount_path: Option<Option<String>>,
    /// optional variable description (255 characters maximum)
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "enable_interpolation_in_file", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_interpolation_in_file: Option<Option<bool>>,
    #[serde(rename = "overridden_variable", skip_serializing_if = "Option::is_none")]
    pub overridden_variable: Option<Box<models::EnvironmentVariableOverride>>,
    #[serde(rename = "aliased_variable", skip_serializing_if = "Option::is_none")]
    pub aliased_variable: Option<Box<models::EnvironmentVariableAlias>>,
    #[serde(rename = "scope")]
    pub scope: models::ApiVariableScopeEnum,
    #[serde(rename = "variable_type")]
    pub variable_type: models::ApiVariableTypeEnum,
    #[serde(rename = "service_id", skip_serializing_if = "Option::is_none")]
    pub service_id: Option<uuid::Uuid>,
    #[serde(rename = "service_name", skip_serializing_if = "Option::is_none")]
    pub service_name: Option<String>,
    #[serde(rename = "service_type", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<models::LinkedServiceTypeEnum>,
    /// Entity that created/own the variable (i.e: Qovery, Doppler)
    #[serde(rename = "owned_by", skip_serializing_if = "Option::is_none")]
    pub owned_by: Option<String>,
}

impl EnvironmentVariable {
    pub fn new(id: uuid::Uuid, created_at: String, key: String, scope: models::ApiVariableScopeEnum, variable_type: models::ApiVariableTypeEnum) -> EnvironmentVariable {
        EnvironmentVariable {
            id,
            created_at,
            updated_at: None,
            key,
            value: None,
            mount_path: None,
            description: None,
            enable_interpolation_in_file: None,
            overridden_variable: None,
            aliased_variable: None,
            scope,
            variable_type,
            service_id: None,
            service_name: None,
            service_type: None,
            owned_by: None,
        }
    }
}

