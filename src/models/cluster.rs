/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cluster {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "organization")]
    pub organization: Box<models::ReferenceObject>,
    /// name is case-insensitive
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "cloud_provider")]
    pub cloud_provider: models::CloudVendorEnum,
    #[serde(rename = "min_running_nodes", skip_serializing_if = "Option::is_none")]
    pub min_running_nodes: Option<i32>,
    #[serde(rename = "max_running_nodes", skip_serializing_if = "Option::is_none")]
    pub max_running_nodes: Option<i32>,
    /// Unit is in GB. The disk size to be used for the node configuration
    #[serde(rename = "disk_size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i32>,
    /// the instance type to be used for this cluster. The list of values can be retrieved via the endpoint /{CloudProvider}/instanceType
    #[serde(rename = "instance_type", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<String>,
    #[serde(rename = "kubernetes", skip_serializing_if = "Option::is_none")]
    pub kubernetes: Option<models::KubernetesEnum>,
    /// unit is millicores (m). 1000m = 1 cpu
    #[serde(rename = "cpu", skip_serializing_if = "Option::is_none")]
    pub cpu: Option<i32>,
    /// unit is MB. 1024 MB = 1GB
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// This is an estimation of the cost this cluster will represent on your cloud proider bill, based on your current configuration
    #[serde(rename = "estimated_cloud_provider_cost", skip_serializing_if = "Option::is_none")]
    pub estimated_cloud_provider_cost: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::ClusterStateEnum>,
    #[serde(rename = "has_access", skip_serializing_if = "Option::is_none")]
    pub has_access: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "is_default", skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    /// specific flag to indicate that this cluster is a demo one
    #[serde(rename = "is_demo", skip_serializing_if = "Option::is_none")]
    pub is_demo: Option<bool>,
    /// specific flag to indicate that this cluster is a production one
    #[serde(rename = "production", skip_serializing_if = "Option::is_none")]
    pub production: Option<bool>,
    /// Indicate your public ssh_key to remotely connect to your EC2 instance.
    #[serde(rename = "ssh_keys", skip_serializing_if = "Option::is_none")]
    pub ssh_keys: Option<Vec<String>>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<models::ClusterFeatureResponse>>,
    #[serde(rename = "deployment_status", skip_serializing_if = "Option::is_none")]
    pub deployment_status: Option<models::ClusterDeploymentStatusEnum>,
    #[serde(rename = "metrics_parameters", skip_serializing_if = "Option::is_none")]
    pub metrics_parameters: Option<Box<models::MetricsParameters>>,
    #[serde(rename = "infrastructure_outputs", skip_serializing_if = "Option::is_none")]
    pub infrastructure_outputs: Option<Box<models::InfrastructureOutputs>>,
}

impl Cluster {
    pub fn new(id: uuid::Uuid, created_at: String, organization: models::ReferenceObject, name: String, region: String, cloud_provider: models::CloudVendorEnum) -> Cluster {
        Cluster {
            id,
            created_at,
            updated_at: None,
            organization: Box::new(organization),
            name,
            description: None,
            region,
            cloud_provider,
            min_running_nodes: None,
            max_running_nodes: None,
            disk_size: None,
            instance_type: None,
            kubernetes: None,
            cpu: None,
            memory: None,
            estimated_cloud_provider_cost: None,
            status: None,
            has_access: None,
            version: None,
            is_default: None,
            is_demo: None,
            production: None,
            ssh_keys: None,
            features: None,
            deployment_status: None,
            metrics_parameters: None,
            infrastructure_outputs: None,
        }
    }
}

