/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobRequest {
    /// name is case insensitive
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// unit is millicores (m). 1000m = 1 cpu
    #[serde(rename = "cpu", skip_serializing_if = "Option::is_none")]
    pub cpu: Option<i32>,
    /// unit is MB. 1024 MB = 1GB
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// Maximum number of restart allowed before the job is considered as failed 0 means that no restart/crash of the job is allowed
    #[serde(rename = "max_nb_restart", skip_serializing_if = "Option::is_none")]
    pub max_nb_restart: Option<i32>,
    /// Maximum number of seconds allowed for the job to run before killing it and mark it as failed
    #[serde(
        rename = "max_duration_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_duration_seconds: Option<i32>,
    /// Indicates if the 'environment preview option' is enabled for this container.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment.
    #[serde(rename = "auto_preview", skip_serializing_if = "Option::is_none")]
    pub auto_preview: Option<bool>,
    /// Port where to run readiness and liveliness probes checks. The port will not be exposed externally
    #[serde(
        rename = "port",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub port: Option<Option<i32>>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<models::JobRequestAllOfSource>,
    #[serde(rename = "healthchecks")]
    pub healthchecks: models::Healthcheck,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<models::JobRequestAllOfSchedule>,
    /// Specify if the job will be automatically updated after receiving a new image tag or a new commit according to the source type.  The new image tag shall be communicated via the \"Auto Deploy job\" endpoint https://api-doc.qovery.com/#tag/Jobs/operation/autoDeployJobEnvironments
    #[serde(
        rename = "auto_deploy",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_deploy: Option<Option<bool>>,
    #[serde(rename = "annotations_groups", skip_serializing_if = "Option::is_none")]
    pub annotations_groups: Option<Vec<models::ServiceAnnotationRequest>>,
    #[serde(rename = "labels_groups", skip_serializing_if = "Option::is_none")]
    pub labels_groups: Option<Vec<models::ServiceLabelRequest>>,
    /// Icon URI representing the job.
    #[serde(rename = "icon_uri", skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
}

impl JobRequest {
    pub fn new(name: String, healthchecks: models::Healthcheck) -> JobRequest {
        JobRequest {
            name,
            description: None,
            cpu: None,
            memory: None,
            max_nb_restart: None,
            max_duration_seconds: None,
            auto_preview: None,
            port: None,
            source: None,
            healthchecks,
            schedule: None,
            auto_deploy: None,
            annotations_groups: None,
            labels_groups: None,
            icon_uri: None,
        }
    }
}
