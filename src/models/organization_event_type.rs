/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationEventType : Type of the organization event
/// Type of the organization event
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationEventType {
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "UPDATE")]
    Update,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "ACCEPT")]
    Accept,
    #[serde(rename = "EXPORT")]
    Export,
    #[serde(rename = "CLONE")]
    Clone,
    #[serde(rename = "DEPLOY_QUEUED")]
    DeployQueued,
    #[serde(rename = "STOP_QUEUED")]
    StopQueued,
    #[serde(rename = "RESTART_QUEUED")]
    RestartQueued,
    #[serde(rename = "DELETE_QUEUED")]
    DeleteQueued,
    #[serde(rename = "UNINSTALL_QUEUED")]
    UninstallQueued,
    #[serde(rename = "MAINTENANCE")]
    Maintenance,
    #[serde(rename = "DRY_RUN")]
    DryRun,
    #[serde(rename = "TRIGGER_REDEPLOY")]
    TriggerRedeploy,
    #[serde(rename = "TRIGGER_CANCEL")]
    TriggerCancel,
    #[serde(rename = "FORCE_RUN_QUEUED")]
    ForceRunQueued,
    #[serde(rename = "FORCE_RUN_QUEUED_DEPLOY")]
    ForceRunQueuedDeploy,
    #[serde(rename = "FORCE_RUN_QUEUED_STOP")]
    ForceRunQueuedStop,
    #[serde(rename = "FORCE_RUN_QUEUED_DELETE")]
    ForceRunQueuedDelete,
    #[serde(rename = "TRIGGER_DEPLOY")]
    TriggerDeploy,
    #[serde(rename = "TRIGGER_STOP")]
    TriggerStop,
    #[serde(rename = "TRIGGER_RESTART")]
    TriggerRestart,
    #[serde(rename = "TRIGGER_DELETE")]
    TriggerDelete,
    #[serde(rename = "TRIGGER_UNINSTALL")]
    TriggerUninstall,
    #[serde(rename = "TRIGGER_DEPLOY_DRY_RUN")]
    TriggerDeployDryRun,
    #[serde(rename = "TRIGGER_TERRAFORM_FORCE_UNLOCK")]
    TriggerTerraformForceUnlock,
    #[serde(rename = "TRIGGER_TERRAFORM_MIGRATE_STATE")]
    TriggerTerraformMigrateState,
    #[serde(rename = "TRIGGER_FORCE_RUN")]
    TriggerForceRun,
    #[serde(rename = "TRIGGER_FORCE_RUN_DEPLOY")]
    TriggerForceRunDeploy,
    #[serde(rename = "TRIGGER_FORCE_RUN_STOP")]
    TriggerForceRunStop,
    #[serde(rename = "TRIGGER_FORCE_RUN_DELETE")]
    TriggerForceRunDelete,
    #[serde(rename = "DEPLOYED")]
    Deployed,
    #[serde(rename = "STOPPED")]
    Stopped,
    #[serde(rename = "DELETED")]
    Deleted,
    #[serde(rename = "UNINSTALLED")]
    Uninstalled,
    #[serde(rename = "RESTARTED")]
    Restarted,
    #[serde(rename = "DEPLOYED_DRY_RUN")]
    DeployedDryRun,
    #[serde(rename = "FORCE_RUN_SUCCEEDED")]
    ForceRunSucceeded,
    #[serde(rename = "TERRAFORM_FORCE_UNLOCK_SUCCEEDED")]
    TerraformForceUnlockSucceeded,
    #[serde(rename = "TERRAFORM_MIGRATE_STATE_SUCCEEDED")]
    TerraformMigrateStateSucceeded,
    #[serde(rename = "DEPLOY_FAILED")]
    DeployFailed,
    #[serde(rename = "STOP_FAILED")]
    StopFailed,
    #[serde(rename = "DELETE_FAILED")]
    DeleteFailed,
    #[serde(rename = "UNINSTALL_FAILED")]
    UninstallFailed,
    #[serde(rename = "RESTART_FAILED")]
    RestartFailed,
    #[serde(rename = "DEPLOYED_DRY_RUN_FAILED")]
    DeployedDryRunFailed,
    #[serde(rename = "FORCE_RUN_FAILED")]
    ForceRunFailed,
    #[serde(rename = "TERRAFORM_FORCE_UNLOCK_FAILED")]
    TerraformForceUnlockFailed,
    #[serde(rename = "TERRAFORM_MIGRATE_STATE_FAILED")]
    TerraformMigrateStateFailed,
    #[serde(rename = "SHELL")]
    Shell,
    #[serde(rename = "SSO")]
    Sso,
    #[serde(rename = "PORT_FORWARD")]
    PortForward,
    #[serde(rename = "REMOTE_DEBUG")]
    RemoteDebug,
    #[serde(rename = "IMPORT")]
    Import,
    #[serde(rename = "LOCK")]
    Lock,
    #[serde(rename = "UNLOCK")]
    Unlock,
}

impl std::fmt::Display for OrganizationEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Create => write!(f, "CREATE"),
            Self::Update => write!(f, "UPDATE"),
            Self::Delete => write!(f, "DELETE"),
            Self::Accept => write!(f, "ACCEPT"),
            Self::Export => write!(f, "EXPORT"),
            Self::Clone => write!(f, "CLONE"),
            Self::DeployQueued => write!(f, "DEPLOY_QUEUED"),
            Self::StopQueued => write!(f, "STOP_QUEUED"),
            Self::RestartQueued => write!(f, "RESTART_QUEUED"),
            Self::DeleteQueued => write!(f, "DELETE_QUEUED"),
            Self::UninstallQueued => write!(f, "UNINSTALL_QUEUED"),
            Self::Maintenance => write!(f, "MAINTENANCE"),
            Self::DryRun => write!(f, "DRY_RUN"),
            Self::TriggerRedeploy => write!(f, "TRIGGER_REDEPLOY"),
            Self::TriggerCancel => write!(f, "TRIGGER_CANCEL"),
            Self::ForceRunQueued => write!(f, "FORCE_RUN_QUEUED"),
            Self::ForceRunQueuedDeploy => write!(f, "FORCE_RUN_QUEUED_DEPLOY"),
            Self::ForceRunQueuedStop => write!(f, "FORCE_RUN_QUEUED_STOP"),
            Self::ForceRunQueuedDelete => write!(f, "FORCE_RUN_QUEUED_DELETE"),
            Self::TriggerDeploy => write!(f, "TRIGGER_DEPLOY"),
            Self::TriggerStop => write!(f, "TRIGGER_STOP"),
            Self::TriggerRestart => write!(f, "TRIGGER_RESTART"),
            Self::TriggerDelete => write!(f, "TRIGGER_DELETE"),
            Self::TriggerUninstall => write!(f, "TRIGGER_UNINSTALL"),
            Self::TriggerDeployDryRun => write!(f, "TRIGGER_DEPLOY_DRY_RUN"),
            Self::TriggerTerraformForceUnlock => write!(f, "TRIGGER_TERRAFORM_FORCE_UNLOCK"),
            Self::TriggerTerraformMigrateState => write!(f, "TRIGGER_TERRAFORM_MIGRATE_STATE"),
            Self::TriggerForceRun => write!(f, "TRIGGER_FORCE_RUN"),
            Self::TriggerForceRunDeploy => write!(f, "TRIGGER_FORCE_RUN_DEPLOY"),
            Self::TriggerForceRunStop => write!(f, "TRIGGER_FORCE_RUN_STOP"),
            Self::TriggerForceRunDelete => write!(f, "TRIGGER_FORCE_RUN_DELETE"),
            Self::Deployed => write!(f, "DEPLOYED"),
            Self::Stopped => write!(f, "STOPPED"),
            Self::Deleted => write!(f, "DELETED"),
            Self::Uninstalled => write!(f, "UNINSTALLED"),
            Self::Restarted => write!(f, "RESTARTED"),
            Self::DeployedDryRun => write!(f, "DEPLOYED_DRY_RUN"),
            Self::ForceRunSucceeded => write!(f, "FORCE_RUN_SUCCEEDED"),
            Self::TerraformForceUnlockSucceeded => write!(f, "TERRAFORM_FORCE_UNLOCK_SUCCEEDED"),
            Self::TerraformMigrateStateSucceeded => write!(f, "TERRAFORM_MIGRATE_STATE_SUCCEEDED"),
            Self::DeployFailed => write!(f, "DEPLOY_FAILED"),
            Self::StopFailed => write!(f, "STOP_FAILED"),
            Self::DeleteFailed => write!(f, "DELETE_FAILED"),
            Self::UninstallFailed => write!(f, "UNINSTALL_FAILED"),
            Self::RestartFailed => write!(f, "RESTART_FAILED"),
            Self::DeployedDryRunFailed => write!(f, "DEPLOYED_DRY_RUN_FAILED"),
            Self::ForceRunFailed => write!(f, "FORCE_RUN_FAILED"),
            Self::TerraformForceUnlockFailed => write!(f, "TERRAFORM_FORCE_UNLOCK_FAILED"),
            Self::TerraformMigrateStateFailed => write!(f, "TERRAFORM_MIGRATE_STATE_FAILED"),
            Self::Shell => write!(f, "SHELL"),
            Self::Sso => write!(f, "SSO"),
            Self::PortForward => write!(f, "PORT_FORWARD"),
            Self::RemoteDebug => write!(f, "REMOTE_DEBUG"),
            Self::Import => write!(f, "IMPORT"),
            Self::Lock => write!(f, "LOCK"),
            Self::Unlock => write!(f, "UNLOCK"),
        }
    }
}

impl Default for OrganizationEventType {
    fn default() -> OrganizationEventType {
        Self::Create
    }
}
