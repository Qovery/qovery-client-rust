/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationEventType : Type of the organization event
/// Type of the organization event
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationEventType {
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "UPDATE")]
    Update,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "ACCEPT")]
    Accept,
    #[serde(rename = "EXPORT")]
    Export,
    #[serde(rename = "TRIGGER_DEPLOY")]
    TriggerDeploy,
    #[serde(rename = "TRIGGER_REDEPLOY")]
    TriggerRedeploy,
    #[serde(rename = "TRIGGER_STOP")]
    TriggerStop,
    #[serde(rename = "TRIGGER_CANCEL")]
    TriggerCancel,
    #[serde(rename = "TRIGGER_RESTART")]
    TriggerRestart,
    #[serde(rename = "TRIGGER_DELETE")]
    TriggerDelete,
    #[serde(rename = "SHELL")]
    Shell,
    #[serde(rename = "PORT_FORWARD")]
    PortForward,
    #[serde(rename = "CLONE")]
    Clone,
    #[serde(rename = "DEPLOYED")]
    Deployed,
    #[serde(rename = "STOPPED")]
    Stopped,
    #[serde(rename = "DELETED")]
    Deleted,
    #[serde(rename = "RESTARTED")]
    Restarted,
    #[serde(rename = "DEPLOY_FAILED")]
    DeployFailed,
    #[serde(rename = "STOP_FAILED")]
    StopFailed,
    #[serde(rename = "DELETE_FAILED")]
    DeleteFailed,
    #[serde(rename = "RESTART_FAILED")]
    RestartFailed,
    #[serde(rename = "MAINTENANCE")]
    Maintenance,
}

impl std::fmt::Display for OrganizationEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Create => write!(f, "CREATE"),
            Self::Update => write!(f, "UPDATE"),
            Self::Delete => write!(f, "DELETE"),
            Self::Accept => write!(f, "ACCEPT"),
            Self::Export => write!(f, "EXPORT"),
            Self::TriggerDeploy => write!(f, "TRIGGER_DEPLOY"),
            Self::TriggerRedeploy => write!(f, "TRIGGER_REDEPLOY"),
            Self::TriggerStop => write!(f, "TRIGGER_STOP"),
            Self::TriggerCancel => write!(f, "TRIGGER_CANCEL"),
            Self::TriggerRestart => write!(f, "TRIGGER_RESTART"),
            Self::TriggerDelete => write!(f, "TRIGGER_DELETE"),
            Self::Shell => write!(f, "SHELL"),
            Self::PortForward => write!(f, "PORT_FORWARD"),
            Self::Clone => write!(f, "CLONE"),
            Self::Deployed => write!(f, "DEPLOYED"),
            Self::Stopped => write!(f, "STOPPED"),
            Self::Deleted => write!(f, "DELETED"),
            Self::Restarted => write!(f, "RESTARTED"),
            Self::DeployFailed => write!(f, "DEPLOY_FAILED"),
            Self::StopFailed => write!(f, "STOP_FAILED"),
            Self::DeleteFailed => write!(f, "DELETE_FAILED"),
            Self::RestartFailed => write!(f, "RESTART_FAILED"),
            Self::Maintenance => write!(f, "MAINTENANCE"),
        }
    }
}

impl Default for OrganizationEventType {
    fn default() -> OrganizationEventType {
        Self::Create
    }
}
