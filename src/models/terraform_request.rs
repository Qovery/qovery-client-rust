/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TerraformRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "auto_approve")]
    pub auto_approve: bool,
    #[serde(rename = "auto_deploy")]
    pub auto_deploy: bool,
    #[serde(rename = "terraform_files_source")]
    pub terraform_files_source: models::TerraformRequestTerraformFilesSource,
    #[serde(rename = "terraform_variables_source")]
    pub terraform_variables_source: models::TerraformVariablesSourceRequest,
    #[serde(rename = "backend")]
    pub backend: models::TerraformBackend,
    #[serde(rename = "provider")]
    pub provider: Provider,
    #[serde(rename = "provider_version")]
    pub provider_version: models::TerraformProviderVersion,
    #[serde(rename = "timeout_sec", skip_serializing_if = "Option::is_none")]
    pub timeout_sec: Option<i32>,
    #[serde(rename = "icon_uri", skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(rename = "job_resources")]
    pub job_resources: models::TerraformRequestJobResources,
    #[serde(
        rename = "use_cluster_credentials",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_cluster_credentials: Option<bool>,
    /// The key represent the action command name i.e: \"plan\" The value represent the extra arguments to pass to this command  i.e: {\"apply\", [\"-lock=false\"]} is going to prepend `-lock=false` to terraform apply commands
    #[serde(
        rename = "action_extra_arguments",
        skip_serializing_if = "Option::is_none"
    )]
    pub action_extra_arguments: Option<std::collections::HashMap<String, Vec<String>>>,
}

impl TerraformRequest {
    pub fn new(
        name: String,
        description: String,
        auto_approve: bool,
        auto_deploy: bool,
        terraform_files_source: models::TerraformRequestTerraformFilesSource,
        terraform_variables_source: models::TerraformVariablesSourceRequest,
        backend: models::TerraformBackend,
        provider: Provider,
        provider_version: models::TerraformProviderVersion,
        job_resources: models::TerraformRequestJobResources,
    ) -> TerraformRequest {
        TerraformRequest {
            name,
            description,
            auto_approve,
            auto_deploy,
            terraform_files_source,
            terraform_variables_source,
            backend,
            provider,
            provider_version,
            timeout_sec: None,
            icon_uri: None,
            job_resources,
            use_cluster_credentials: None,
            action_extra_arguments: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Provider {
    #[serde(rename = "TERRAFORM")]
    Terraform,
}

impl Default for Provider {
    fn default() -> Provider {
        Self::Terraform
    }
}
