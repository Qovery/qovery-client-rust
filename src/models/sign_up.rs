/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignUp {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "first_name")]
    pub first_name: String,
    #[serde(rename = "last_name")]
    pub last_name: String,
    #[serde(rename = "user_email")]
    pub user_email: String,
    #[serde(rename = "type_of_use")]
    pub type_of_use: models::TypeOfUseEnum,
    #[serde(rename = "qovery_usage")]
    pub qovery_usage: String,
    #[serde(
        rename = "company_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub company_name: Option<Option<String>>,
    #[serde(rename = "company_size", skip_serializing_if = "Option::is_none")]
    pub company_size: Option<models::CompanySizeEnum>,
    #[serde(
        rename = "user_role",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_role: Option<Option<String>>,
    #[serde(
        rename = "qovery_usage_other",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub qovery_usage_other: Option<Option<String>>,
    #[serde(
        rename = "user_questions",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_questions: Option<Option<String>>,
    #[serde(
        rename = "current_step",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_step: Option<Option<String>>,
    #[serde(
        rename = "dx_auth",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub dx_auth: Option<Option<bool>>,
    #[serde(
        rename = "infrastructure_hosting",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub infrastructure_hosting: Option<Option<String>>,
}

impl SignUp {
    pub fn new(
        id: uuid::Uuid,
        created_at: String,
        first_name: String,
        last_name: String,
        user_email: String,
        type_of_use: models::TypeOfUseEnum,
        qovery_usage: String,
    ) -> SignUp {
        SignUp {
            id,
            created_at,
            updated_at: None,
            first_name,
            last_name,
            user_email,
            type_of_use,
            qovery_usage,
            company_name: None,
            company_size: None,
            user_role: None,
            qovery_usage_other: None,
            user_questions: None,
            current_step: None,
            dx_auth: None,
            infrastructure_hosting: None,
        }
    }
}
