/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationWebhookCreateResponse {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<models::OrganizationWebhookKindEnum>,
    /// Set the public HTTP or HTTPS endpoint that will receive the specified events. The target URL must starts with `http://` or `https://`
    #[serde(rename = "target_url", skip_serializing_if = "Option::is_none")]
    pub target_url: Option<String>,
    #[serde(rename = "target_secret_set", skip_serializing_if = "Option::is_none")]
    pub target_secret_set: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Turn on or off your endpoint.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<models::OrganizationWebhookEventEnum>>,
    /// Specify the project names you want to filter to.  This webhook will be triggered only if the event is coming from the specified Project IDs. Notes: 1. Wildcard is accepted E.g. `product*`. 2. Name is case insensitive.
    #[serde(
        rename = "project_names_filter",
        skip_serializing_if = "Option::is_none"
    )]
    pub project_names_filter: Option<Vec<String>>,
    /// Specify the environment modes you want to filter to. This webhook will be triggered only if the event is coming from an environment with the specified mode.
    #[serde(
        rename = "environment_types_filter",
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_types_filter: Option<Vec<models::EnvironmentModeEnum>>,
}

impl OrganizationWebhookCreateResponse {
    pub fn new(id: uuid::Uuid, created_at: String) -> OrganizationWebhookCreateResponse {
        OrganizationWebhookCreateResponse {
            id,
            created_at,
            updated_at: None,
            kind: None,
            target_url: None,
            target_secret_set: None,
            description: None,
            enabled: None,
            events: None,
            project_names_filter: None,
            environment_types_filter: None,
        }
    }
}
