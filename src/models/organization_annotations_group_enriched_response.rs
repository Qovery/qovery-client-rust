/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationAnnotationsGroupEnrichedResponse {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "annotations")]
    pub annotations: Vec<models::Annotation>,
    #[serde(rename = "scopes")]
    pub scopes: Vec<models::OrganizationAnnotationsGroupScopeEnum>,
    #[serde(
        rename = "associated_items_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub associated_items_count: Option<i32>,
}

impl OrganizationAnnotationsGroupEnrichedResponse {
    pub fn new(
        id: uuid::Uuid,
        created_at: String,
        name: String,
        annotations: Vec<models::Annotation>,
        scopes: Vec<models::OrganizationAnnotationsGroupScopeEnum>,
    ) -> OrganizationAnnotationsGroupEnrichedResponse {
        OrganizationAnnotationsGroupEnrichedResponse {
            id,
            created_at,
            updated_at: None,
            name,
            annotations,
            scopes,
            associated_items_count: None,
        }
    }
}
