/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerResponse {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "storage", skip_serializing_if = "Option::is_none")]
    pub storage: Option<Vec<models::ServiceStorageStorageInner>>,
    /// The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository`
    #[serde(rename = "image_name")]
    pub image_name: String,
    /// tag of the image container
    #[serde(rename = "tag")]
    pub tag: String,
    /// tag of the image container
    #[serde(rename = "registry_id", skip_serializing_if = "Option::is_none")]
    pub registry_id: Option<String>,
    #[serde(rename = "registry")]
    pub registry: models::ContainerRegistryProviderDetailsResponse,
    #[serde(rename = "environment")]
    pub environment: models::ReferenceObject,
    /// Maximum cpu that can be allocated to the container based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu
    #[serde(rename = "maximum_cpu")]
    pub maximum_cpu: i32,
    /// Maximum memory that can be allocated to the container based on organization cluster configuration. unit is MB. 1024 MB = 1GB
    #[serde(rename = "maximum_memory")]
    pub maximum_memory: i32,
    /// name is case insensitive
    #[serde(rename = "name")]
    pub name: String,
    /// give a description to this container
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,
    /// optional entrypoint when launching container
    #[serde(rename = "entrypoint", skip_serializing_if = "Option::is_none")]
    pub entrypoint: Option<String>,
    /// unit is millicores (m). 1000m = 1 cpu
    #[serde(rename = "cpu")]
    pub cpu: i32,
    /// unit is MB. 1024 MB = 1GB
    #[serde(rename = "memory")]
    pub memory: i32,
    /// Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: 0 means that there is no container running.
    #[serde(rename = "min_running_instances")]
    pub min_running_instances: i32,
    /// Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: -1 means that there is no limit.
    #[serde(rename = "max_running_instances")]
    pub max_running_instances: i32,
    #[serde(rename = "healthchecks")]
    pub healthchecks: models::Healthcheck,
    /// Indicates if the 'environment preview option' is enabled for this container.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment.
    #[serde(rename = "auto_preview")]
    pub auto_preview: bool,
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<models::ServicePort>>,
    /// Specify if the container will be automatically updated after receiving a new image tag.  The new image tag shall be communicated via the \"Auto Deploy container\" endpoint https://api-doc.qovery.com/#tag/Containers/operation/autoDeployContainerEnvironments
    #[serde(rename = "auto_deploy", skip_serializing_if = "Option::is_none")]
    pub auto_deploy: Option<bool>,
    #[serde(rename = "annotations_groups", skip_serializing_if = "Option::is_none")]
    pub annotations_groups: Option<Vec<models::OrganizationAnnotationsGroupResponse>>,
    #[serde(rename = "labels_groups", skip_serializing_if = "Option::is_none")]
    pub labels_groups: Option<Vec<models::OrganizationLabelsGroupResponse>>,
    /// Icon URI representing the container.
    #[serde(rename = "icon_uri")]
    pub icon_uri: String,
    #[serde(
        rename = "service_type",
        default = "models::service_type_enum::service_type_container"
    )]
    pub service_type: models::ServiceTypeEnum,
}

impl ContainerResponse {
    pub fn new(
        id: uuid::Uuid,
        created_at: String,
        image_name: String,
        tag: String,
        registry: models::ContainerRegistryProviderDetailsResponse,
        environment: models::ReferenceObject,
        maximum_cpu: i32,
        maximum_memory: i32,
        name: String,
        cpu: i32,
        memory: i32,
        min_running_instances: i32,
        max_running_instances: i32,
        healthchecks: models::Healthcheck,
        auto_preview: bool,
        icon_uri: String,
        service_type: models::ServiceTypeEnum,
    ) -> ContainerResponse {
        ContainerResponse {
            id,
            created_at,
            updated_at: None,
            storage: None,
            image_name,
            tag,
            registry_id: None,
            registry,
            environment,
            maximum_cpu,
            maximum_memory,
            name,
            description: None,
            arguments: None,
            entrypoint: None,
            cpu,
            memory,
            min_running_instances,
            max_running_instances,
            healthchecks,
            auto_preview,
            ports: None,
            auto_deploy: None,
            annotations_groups: None,
            labels_groups: None,
            icon_uri,
            service_type,
        }
    }
}
