/*
 * Qovery API
 *
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development.
 *
 * The version of the OpenAPI document: 1.0.4
 * Contact: support+api+documentation@qovery.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentLogsDetails {
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<uuid::Uuid>,
    #[serde(rename = "execution_id", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    #[serde(rename = "transmitter", skip_serializing_if = "Option::is_none")]
    pub transmitter: Option<models::EnvironmentLogsDetailsTransmitter>,
    #[serde(rename = "stage", skip_serializing_if = "Option::is_none")]
    pub stage: Option<models::EnvironmentLogsDetailsStage>,
}

impl EnvironmentLogsDetails {
    pub fn new() -> EnvironmentLogsDetails {
        EnvironmentLogsDetails {
            organization_id: None,
            cluster_id: None,
            execution_id: None,
            transmitter: None,
            stage: None,
        }
    }
}
